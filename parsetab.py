
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLOGICAL_ORleftLOGICAL_ANDleftEQUALSNOT_EQUALSleftLESS_THANLESS_THAN_OR_EQUALGREATER_THANGREATER_THAN_OR_EQUALleftPLUSMINUSleftMULTIPLYDIVIDEMODULUSrightLOGICAL_NOTnonassocEQUALSASSIGN COLON COMMA DIVIDE DO ELSE ELSE_IF EQUALS FALSE FLOAT FOR GREATER_THAN GREATER_THAN_OR_EQUAL IDENTIFIER IF INPUT INTEGER LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS_THAN LESS_THAN_OR_EQUAL LOGICAL_AND LOGICAL_NOT LOGICAL_OR MAIN MINUS MODULUS MULTIPLY NOT_EQUALS PLUS PRINT RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN SEMICOLON STRING TRUE TYPE_BOOL TYPE_FLOAT TYPE_INT VOID WHILEprogram : function main_function\n               | main_function\n               \n    main_function : TYPE_INT MAIN LEFT_PAREN RIGHT_PAREN LEFT_BRACE statement_list return_statement RIGHT_BRACE\n    \n    statement_list : statement\n                   | statement statement_list\n    \n    statement : expression_statement\n              | control_statement\n              | return_statement\n    \n    expression_statement : expression SEMICOLON\n    \n    control_statement : if_statement\n                      | while_statement\n                      | for_statement\n                      | do_while_statement\n    \n    control_keyword : WHILE\n                    | IF\n                    | ELSE\n                    | DO\n                    | FOR\n    \n    type_keyword : TYPE_INT\n                    | TYPE_FLOAT\n                    | TYPE_BOOL\n\n    if_statement : IF LEFT_PAREN expression RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE\n                    | if_statement ELSE_IF LEFT_BRACE statement RIGHT_BRACE\n                    | if_statement ELSE LEFT_BRACE statement RIGHT_BRACE\n    while_statement : WHILE LEFT_PAREN expression RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE\n    do_while_statement : DO LEFT_BRACE statement RIGHT_BRACE WHILE LEFT_PAREN expression RIGHT_PAREN\n    for_statement : FOR LEFT_PAREN assignment_expression SEMICOLON logical_expression SEMICOLON assignment_expression RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE\n    return_statement : RETURN number SEMICOLON\n                        | RETURN SEMICOLON\n    expression : assignment_expression\n                 | logical_expression\n    \n    assignment_expression : type_keyword  IDENTIFIER ASSIGN INTEGER\n                          | type_keyword  IDENTIFIER ASSIGN FLOAT\n                          | type_keyword  IDENTIFIER ASSIGN TRUE\n                          | type_keyword  IDENTIFIER ASSIGN FALSE\n                          | type_keyword  IDENTIFIER ASSIGN function_call\n    \n    logical_expression : logical_or_expression\n    \n    logical_or_expression : logical_and_expression\n                          | logical_and_expression LOGICAL_OR logical_and_expression\n    \n    logical_and_expression : equality_expression\n                           | equality_expression LOGICAL_AND equality_expression\n    logical_not_expression : LOGICAL_NOT logical_and_expression\n                              | LOGICAL_NOT logical_or_expression\n    equality_expression : relational_expression EQUALS relational_expression\n                           | relational_expression NOT_EQUALS relational_expression\n    relational_expression : additive_expression LESS_THAN additive_expression\n                             | additive_expression GREATER_THAN additive_expression\n                             | additive_expression LESS_THAN_OR_EQUAL additive_expression\n                             | additive_expression GREATER_THAN_OR_EQUAL additive_expressionadditive_expression : multiplicative_expression PLUS multiplicative_expression\n                           | multiplicative_expression MINUS multiplicative_expression\n                           | unary_expression MINUS unary_expression\n                           | unary_expression PLUS unary_expression\n    multiplicative_expression    : unary_expression MULTIPLY unary_expression\n                                    | unary_expression DIVIDE unary_expressionunary_expression ::= primary_expression\n                            | MINUS primary_expression\n                            | PLUS primary_expression\n    primary_expression : IDENTIFIER\n                            | number\n                            | LEFT_PAREN expression RIGHT_PAREN\n                            | function_call function : type_keyword IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACEfunction_call : IDENTIFIER LEFT_PAREN argument_list RIGHT_PARENargument_list : type_keyword expression  number   : INTEGER\n                | FLOAT'
    
_lr_action_items = {'TYPE_INT':([0,2,6,7,12,14,16,37,39,41,59,61,62,63,64,66,67,68,69,96,100,101,102,103,104,112,114,115,116,127,128,129,130,135,136,137,138,142,143,145,],[5,9,-20,-21,16,16,-19,16,16,16,16,-8,16,-6,-7,-10,-11,-12,-13,-9,-29,16,16,16,16,-63,16,16,-28,-23,-24,16,16,16,16,-22,-25,-26,16,-27,]),'TYPE_FLOAT':([0,6,7,12,14,16,37,39,41,59,61,62,63,64,66,67,68,69,96,100,101,102,103,104,114,115,116,127,128,129,130,135,136,137,138,142,143,145,],[6,-20,-21,6,6,-19,6,6,6,6,-8,6,-6,-7,-10,-11,-12,-13,-9,-29,6,6,6,6,6,6,-28,-23,-24,6,6,6,6,-22,-25,-26,6,-27,]),'TYPE_BOOL':([0,6,7,12,14,16,37,39,41,59,61,62,63,64,66,67,68,69,96,100,101,102,103,104,114,115,116,127,128,129,130,135,136,137,138,142,143,145,],[7,-20,-21,7,7,-19,7,7,7,7,-8,7,-6,-7,-10,-11,-12,-13,-9,-29,7,7,7,7,7,7,-28,-23,-24,7,7,7,7,-22,-25,-26,7,-27,]),'$end':([1,3,8,113,],[0,-2,-1,-3,]),'IDENTIFIER':([4,5,6,7,14,16,18,32,33,37,39,42,43,44,45,46,47,48,49,50,51,54,55,56,57,59,61,62,63,64,66,67,68,69,75,96,100,101,102,104,114,115,116,125,127,128,129,130,136,137,138,142,143,145,],[10,-19,-20,-21,22,-19,40,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-8,22,-6,-7,-10,-11,-12,-13,105,-9,-29,22,22,22,22,22,-28,22,-23,-24,22,22,22,-22,-25,-26,22,-27,]),'MAIN':([5,9,],[11,11,]),'MINUS':([6,7,14,16,22,23,24,25,31,34,35,36,37,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,61,62,63,64,66,67,68,69,90,91,92,96,100,101,102,104,111,114,115,116,125,127,128,129,130,136,137,138,142,143,145,],[-20,-21,33,-19,-59,-66,-67,-62,51,54,-56,-60,33,33,33,33,33,33,33,33,33,33,33,33,-58,-57,33,33,33,33,33,-8,33,-6,-7,-10,-11,-12,-13,-54,-55,-61,-9,-29,33,33,33,-64,33,33,-28,33,-23,-24,33,33,33,-22,-25,-26,33,-27,]),'PLUS':([6,7,14,16,22,23,24,25,31,34,35,36,37,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,61,62,63,64,66,67,68,69,90,91,92,96,100,101,102,104,111,114,115,116,125,127,128,129,130,136,137,138,142,143,145,],[-20,-21,32,-19,-59,-66,-67,-62,50,55,-56,-60,32,32,32,32,32,32,32,32,32,32,32,32,-58,-57,32,32,32,32,32,-8,32,-6,-7,-10,-11,-12,-13,-54,-55,-61,-9,-29,32,32,32,-64,32,32,-28,32,-23,-24,32,32,32,-22,-25,-26,32,-27,]),'LEFT_PAREN':([6,7,10,11,14,16,22,32,33,37,39,42,43,44,45,46,47,48,49,50,51,54,55,56,57,59,61,62,63,64,66,67,68,69,71,72,73,96,100,101,102,104,105,114,115,116,125,127,128,129,130,132,136,137,138,142,143,145,],[-20,-21,12,13,37,-19,41,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-8,37,-6,-7,-10,-11,-12,-13,101,102,103,-9,-29,37,37,37,41,37,37,-28,37,-23,-24,37,37,136,37,-22,-25,-26,37,-27,]),'INTEGER':([6,7,14,16,32,33,37,39,42,43,44,45,46,47,48,49,50,51,54,55,56,57,59,61,62,63,64,66,67,68,69,70,75,96,100,101,102,104,114,115,116,125,127,128,129,130,136,137,138,142,143,145,],[-20,-21,23,-19,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-8,23,-6,-7,-10,-11,-12,-13,23,106,-9,-29,23,23,23,23,23,-28,23,-23,-24,23,23,23,-22,-25,-26,23,-27,]),'FLOAT':([6,7,14,16,32,33,37,39,42,43,44,45,46,47,48,49,50,51,54,55,56,57,59,61,62,63,64,66,67,68,69,70,75,96,100,101,102,104,114,115,116,125,127,128,129,130,136,137,138,142,143,145,],[-20,-21,24,-19,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-8,24,-6,-7,-10,-11,-12,-13,24,107,-9,-29,24,24,24,24,24,-28,24,-23,-24,24,24,24,-22,-25,-26,24,-27,]),'RIGHT_PAREN':([13,15,19,20,21,22,23,24,25,26,27,28,35,36,52,53,58,76,77,78,79,80,81,82,83,84,85,87,88,89,90,91,92,106,107,108,109,110,111,117,118,139,140,],[17,38,-65,-30,-31,-59,-66,-67,-62,-37,-38,-40,-56,-60,-58,-57,92,111,-39,-41,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-61,-32,-33,-34,-35,-36,-64,123,124,141,142,]),'LEFT_BRACE':([17,38,74,97,98,123,124,141,],[39,59,104,114,115,129,130,143,]),'SEMICOLON':([20,21,22,23,24,25,26,27,28,35,36,52,53,65,70,77,78,79,80,81,82,83,84,85,87,88,89,90,91,92,99,106,107,108,109,110,111,119,131,],[-30,-31,-59,-66,-67,-62,-37,-38,-40,-56,-60,-58,-57,96,100,-39,-41,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-61,116,-32,-33,-34,-35,-36,-64,125,135,]),'MULTIPLY':([22,23,24,25,34,35,36,52,53,86,92,111,],[-59,-66,-67,-62,56,-56,-60,-58,-57,56,-61,-64,]),'DIVIDE':([22,23,24,25,34,35,36,52,53,86,92,111,],[-59,-66,-67,-62,57,-56,-60,-58,-57,57,-61,-64,]),'LESS_THAN':([22,23,24,25,30,35,36,52,53,85,87,88,89,90,91,92,111,],[-59,-66,-67,-62,46,-56,-60,-58,-57,-50,-51,-52,-53,-54,-55,-61,-64,]),'GREATER_THAN':([22,23,24,25,30,35,36,52,53,85,87,88,89,90,91,92,111,],[-59,-66,-67,-62,47,-56,-60,-58,-57,-50,-51,-52,-53,-54,-55,-61,-64,]),'LESS_THAN_OR_EQUAL':([22,23,24,25,30,35,36,52,53,85,87,88,89,90,91,92,111,],[-59,-66,-67,-62,48,-56,-60,-58,-57,-50,-51,-52,-53,-54,-55,-61,-64,]),'GREATER_THAN_OR_EQUAL':([22,23,24,25,30,35,36,52,53,85,87,88,89,90,91,92,111,],[-59,-66,-67,-62,49,-56,-60,-58,-57,-50,-51,-52,-53,-54,-55,-61,-64,]),'EQUALS':([22,23,24,25,29,35,36,52,53,81,82,83,84,85,87,88,89,90,91,92,111,],[-59,-66,-67,-62,44,-56,-60,-58,-57,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-61,-64,]),'NOT_EQUALS':([22,23,24,25,29,35,36,52,53,81,82,83,84,85,87,88,89,90,91,92,111,],[-59,-66,-67,-62,45,-56,-60,-58,-57,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-61,-64,]),'LOGICAL_AND':([22,23,24,25,28,35,36,52,53,79,80,81,82,83,84,85,87,88,89,90,91,92,111,],[-59,-66,-67,-62,43,-56,-60,-58,-57,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-61,-64,]),'LOGICAL_OR':([22,23,24,25,27,28,35,36,52,53,78,79,80,81,82,83,84,85,87,88,89,90,91,92,111,],[-59,-66,-67,-62,42,-40,-56,-60,-58,-57,-41,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-61,-64,]),'RETURN':([39,59,60,61,62,63,64,66,67,68,69,95,96,100,104,114,115,116,127,128,129,130,137,138,142,143,145,],[70,70,70,-8,70,-6,-7,-10,-11,-12,-13,-5,-9,-29,70,70,70,-28,-23,-24,70,70,-22,-25,-26,70,-27,]),'IF':([39,59,61,62,63,64,66,67,68,69,96,100,104,114,115,116,127,128,129,130,137,138,142,143,145,],[71,71,-8,71,-6,-7,-10,-11,-12,-13,-9,-29,71,71,71,-28,-23,-24,71,71,-22,-25,-26,71,-27,]),'WHILE':([39,59,61,62,63,64,66,67,68,69,96,100,104,114,115,116,126,127,128,129,130,137,138,142,143,145,],[72,72,-8,72,-6,-7,-10,-11,-12,-13,-9,-29,72,72,72,-28,132,-23,-24,72,72,-22,-25,-26,72,-27,]),'FOR':([39,59,61,62,63,64,66,67,68,69,96,100,104,114,115,116,127,128,129,130,137,138,142,143,145,],[73,73,-8,73,-6,-7,-10,-11,-12,-13,-9,-29,73,73,73,-28,-23,-24,73,73,-22,-25,-26,73,-27,]),'DO':([39,59,61,62,63,64,66,67,68,69,96,100,104,114,115,116,127,128,129,130,137,138,142,143,145,],[74,74,-8,74,-6,-7,-10,-11,-12,-13,-9,-29,74,74,74,-28,-23,-24,74,74,-22,-25,-26,74,-27,]),'ASSIGN':([40,],[75,]),'RIGHT_BRACE':([61,62,63,64,66,67,68,69,93,94,95,96,100,116,120,121,122,127,128,133,134,137,138,142,144,145,],[-8,-4,-6,-7,-10,-11,-12,-13,112,113,-5,-9,-29,-28,126,127,128,-23,-24,137,138,-22,-25,-26,145,-27,]),'ELSE_IF':([66,127,128,137,],[97,-23,-24,-22,]),'ELSE':([66,127,128,137,],[98,-23,-24,-22,]),'TRUE':([75,],[108,]),'FALSE':([75,],[109,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'function':([0,],[2,]),'main_function':([0,2,],[3,8,]),'type_keyword':([0,12,14,37,39,41,59,62,101,102,103,104,114,115,129,130,135,136,143,],[4,14,18,18,18,14,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'argument_list':([12,41,],[15,76,]),'expression':([14,37,39,59,62,101,102,104,114,115,129,130,136,143,],[19,58,65,65,65,117,118,65,65,65,65,65,140,65,]),'assignment_expression':([14,37,39,59,62,101,102,103,104,114,115,129,130,135,136,143,],[20,20,20,20,20,20,20,119,20,20,20,20,20,139,20,20,]),'logical_expression':([14,37,39,59,62,101,102,104,114,115,125,129,130,136,143,],[21,21,21,21,21,21,21,21,21,21,131,21,21,21,21,]),'function_call':([14,32,33,37,39,42,43,44,45,46,47,48,49,50,51,54,55,56,57,59,62,75,101,102,104,114,115,125,129,130,136,143,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,110,25,25,25,25,25,25,25,25,25,25,]),'logical_or_expression':([14,37,39,59,62,101,102,104,114,115,125,129,130,136,143,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'logical_and_expression':([14,37,39,42,59,62,101,102,104,114,115,125,129,130,136,143,],[27,27,27,77,27,27,27,27,27,27,27,27,27,27,27,27,]),'equality_expression':([14,37,39,42,43,59,62,101,102,104,114,115,125,129,130,136,143,],[28,28,28,28,78,28,28,28,28,28,28,28,28,28,28,28,28,]),'relational_expression':([14,37,39,42,43,44,45,59,62,101,102,104,114,115,125,129,130,136,143,],[29,29,29,29,29,79,80,29,29,29,29,29,29,29,29,29,29,29,29,]),'additive_expression':([14,37,39,42,43,44,45,46,47,48,49,59,62,101,102,104,114,115,125,129,130,136,143,],[30,30,30,30,30,30,30,81,82,83,84,30,30,30,30,30,30,30,30,30,30,30,30,]),'multiplicative_expression':([14,37,39,42,43,44,45,46,47,48,49,50,51,59,62,101,102,104,114,115,125,129,130,136,143,],[31,31,31,31,31,31,31,31,31,31,31,85,87,31,31,31,31,31,31,31,31,31,31,31,31,]),'unary_expression':([14,37,39,42,43,44,45,46,47,48,49,50,51,54,55,56,57,59,62,101,102,104,114,115,125,129,130,136,143,],[34,34,34,34,34,34,34,34,34,34,34,86,86,88,89,90,91,34,34,34,34,34,34,34,34,34,34,34,34,]),'primary_expression':([14,32,33,37,39,42,43,44,45,46,47,48,49,50,51,54,55,56,57,59,62,101,102,104,114,115,125,129,130,136,143,],[35,52,53,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'number':([14,32,33,37,39,42,43,44,45,46,47,48,49,50,51,54,55,56,57,59,62,70,101,102,104,114,115,125,129,130,136,143,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,99,36,36,36,36,36,36,36,36,36,36,]),'statement_list':([39,59,62,143,],[60,93,95,144,]),'return_statement':([39,59,60,62,104,114,115,129,130,143,],[61,61,94,61,61,61,61,61,61,61,]),'statement':([39,59,62,104,114,115,129,130,143,],[62,62,62,120,121,122,133,134,62,]),'expression_statement':([39,59,62,104,114,115,129,130,143,],[63,63,63,63,63,63,63,63,63,]),'control_statement':([39,59,62,104,114,115,129,130,143,],[64,64,64,64,64,64,64,64,64,]),'if_statement':([39,59,62,104,114,115,129,130,143,],[66,66,66,66,66,66,66,66,66,]),'while_statement':([39,59,62,104,114,115,129,130,143,],[67,67,67,67,67,67,67,67,67,]),'for_statement':([39,59,62,104,114,115,129,130,143,],[68,68,68,68,68,68,68,68,68,]),'do_while_statement':([39,59,62,104,114,115,129,130,143,],[69,69,69,69,69,69,69,69,69,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function main_function','program',2,'p_program','old_parser.py',29),
  ('program -> main_function','program',1,'p_program','old_parser.py',30),
  ('main_function -> TYPE_INT MAIN LEFT_PAREN RIGHT_PAREN LEFT_BRACE statement_list return_statement RIGHT_BRACE','main_function',8,'p_main_function','old_parser.py',37),
  ('statement_list -> statement','statement_list',1,'p_statement_list','old_parser.py',46),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','old_parser.py',47),
  ('statement -> expression_statement','statement',1,'p_statement','old_parser.py',55),
  ('statement -> control_statement','statement',1,'p_statement','old_parser.py',56),
  ('statement -> return_statement','statement',1,'p_statement','old_parser.py',57),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','old_parser.py',65),
  ('control_statement -> if_statement','control_statement',1,'p_control_statement','old_parser.py',73),
  ('control_statement -> while_statement','control_statement',1,'p_control_statement','old_parser.py',74),
  ('control_statement -> for_statement','control_statement',1,'p_control_statement','old_parser.py',75),
  ('control_statement -> do_while_statement','control_statement',1,'p_control_statement','old_parser.py',76),
  ('control_keyword -> WHILE','control_keyword',1,'p_control_keyword','old_parser.py',84),
  ('control_keyword -> IF','control_keyword',1,'p_control_keyword','old_parser.py',85),
  ('control_keyword -> ELSE','control_keyword',1,'p_control_keyword','old_parser.py',86),
  ('control_keyword -> DO','control_keyword',1,'p_control_keyword','old_parser.py',87),
  ('control_keyword -> FOR','control_keyword',1,'p_control_keyword','old_parser.py',88),
  ('type_keyword -> TYPE_INT','type_keyword',1,'p_type_keyword','old_parser.py',96),
  ('type_keyword -> TYPE_FLOAT','type_keyword',1,'p_type_keyword','old_parser.py',97),
  ('type_keyword -> TYPE_BOOL','type_keyword',1,'p_type_keyword','old_parser.py',98),
  ('if_statement -> IF LEFT_PAREN expression RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE','if_statement',7,'p_if_statement','old_parser.py',107),
  ('if_statement -> if_statement ELSE_IF LEFT_BRACE statement RIGHT_BRACE','if_statement',5,'p_if_statement','old_parser.py',108),
  ('if_statement -> if_statement ELSE LEFT_BRACE statement RIGHT_BRACE','if_statement',5,'p_if_statement','old_parser.py',109),
  ('while_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE','while_statement',7,'p_while_statement','old_parser.py',116),
  ('do_while_statement -> DO LEFT_BRACE statement RIGHT_BRACE WHILE LEFT_PAREN expression RIGHT_PAREN','do_while_statement',8,'p_do_while_statement','old_parser.py',123),
  ('for_statement -> FOR LEFT_PAREN assignment_expression SEMICOLON logical_expression SEMICOLON assignment_expression RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE','for_statement',11,'p_for_statement','old_parser.py',131),
  ('return_statement -> RETURN number SEMICOLON','return_statement',3,'p_return_statement','old_parser.py',138),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','old_parser.py',139),
  ('expression -> assignment_expression','expression',1,'p_expression','old_parser.py',149),
  ('expression -> logical_expression','expression',1,'p_expression','old_parser.py',150),
  ('assignment_expression -> type_keyword IDENTIFIER ASSIGN INTEGER','assignment_expression',4,'p_assignment_expression','old_parser.py',158),
  ('assignment_expression -> type_keyword IDENTIFIER ASSIGN FLOAT','assignment_expression',4,'p_assignment_expression','old_parser.py',159),
  ('assignment_expression -> type_keyword IDENTIFIER ASSIGN TRUE','assignment_expression',4,'p_assignment_expression','old_parser.py',160),
  ('assignment_expression -> type_keyword IDENTIFIER ASSIGN FALSE','assignment_expression',4,'p_assignment_expression','old_parser.py',161),
  ('assignment_expression -> type_keyword IDENTIFIER ASSIGN function_call','assignment_expression',4,'p_assignment_expression','old_parser.py',162),
  ('logical_expression -> logical_or_expression','logical_expression',1,'p_logical_expression','old_parser.py',173),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','old_parser.py',181),
  ('logical_or_expression -> logical_and_expression LOGICAL_OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','old_parser.py',182),
  ('logical_and_expression -> equality_expression','logical_and_expression',1,'p_logical_and_expression','old_parser.py',193),
  ('logical_and_expression -> equality_expression LOGICAL_AND equality_expression','logical_and_expression',3,'p_logical_and_expression','old_parser.py',194),
  ('logical_not_expression -> LOGICAL_NOT logical_and_expression','logical_not_expression',2,'p_logical_not','old_parser.py',208),
  ('logical_not_expression -> LOGICAL_NOT logical_or_expression','logical_not_expression',2,'p_logical_not','old_parser.py',209),
  ('equality_expression -> relational_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','old_parser.py',215),
  ('equality_expression -> relational_expression NOT_EQUALS relational_expression','equality_expression',3,'p_equality_expression','old_parser.py',216),
  ('relational_expression -> additive_expression LESS_THAN additive_expression','relational_expression',3,'p_relational_expression','old_parser.py',225),
  ('relational_expression -> additive_expression GREATER_THAN additive_expression','relational_expression',3,'p_relational_expression','old_parser.py',226),
  ('relational_expression -> additive_expression LESS_THAN_OR_EQUAL additive_expression','relational_expression',3,'p_relational_expression','old_parser.py',227),
  ('relational_expression -> additive_expression GREATER_THAN_OR_EQUAL additive_expression','relational_expression',3,'p_relational_expression','old_parser.py',228),
  ('additive_expression -> multiplicative_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','old_parser.py',240),
  ('additive_expression -> multiplicative_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','old_parser.py',241),
  ('additive_expression -> unary_expression MINUS unary_expression','additive_expression',3,'p_additive_expression','old_parser.py',242),
  ('additive_expression -> unary_expression PLUS unary_expression','additive_expression',3,'p_additive_expression','old_parser.py',243),
  ('multiplicative_expression -> unary_expression MULTIPLY unary_expression','multiplicative_expression',3,'p_multiplicative_expression','old_parser.py',254),
  ('multiplicative_expression -> unary_expression DIVIDE unary_expression','multiplicative_expression',3,'p_multiplicative_expression','old_parser.py',255),
  ('unary_expression -> primary_expression','unary_expression',1,'p_unary_expression','old_parser.py',265),
  ('unary_expression -> MINUS primary_expression','unary_expression',2,'p_unary_expression','old_parser.py',266),
  ('unary_expression -> PLUS primary_expression','unary_expression',2,'p_unary_expression','old_parser.py',267),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','old_parser.py',280),
  ('primary_expression -> number','primary_expression',1,'p_primary_expression','old_parser.py',281),
  ('primary_expression -> LEFT_PAREN expression RIGHT_PAREN','primary_expression',3,'p_primary_expression','old_parser.py',282),
  ('primary_expression -> function_call','primary_expression',1,'p_primary_expression','old_parser.py',283),
  ('function -> type_keyword IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE','function',8,'p_function','old_parser.py',291),
  ('function_call -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN','function_call',4,'p_function_call','old_parser.py',297),
  ('argument_list -> type_keyword expression','argument_list',2,'p_argument_list','old_parser.py',303),
  ('number -> INTEGER','number',1,'p_number','old_parser.py',309),
  ('number -> FLOAT','number',1,'p_number','old_parser.py',310),
]
